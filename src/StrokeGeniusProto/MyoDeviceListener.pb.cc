// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MyoDeviceListener.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace StrokeGeniusProto {

namespace {

const ::google::protobuf::Descriptor* myoDeviceListener_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  myoDeviceListener_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MyoDeviceListener_2eproto() {
  protobuf_AddDesc_MyoDeviceListener_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MyoDeviceListener.proto");
  GOOGLE_CHECK(file != NULL);
  myoDeviceListener_descriptor_ = file->message_type(0);
  static const int myoDeviceListener_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myoDeviceListener, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myoDeviceListener, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myoDeviceListener, orientationdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myoDeviceListener, acceleromaterdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myoDeviceListener, gyroscopedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myoDeviceListener, rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myoDeviceListener, emgdata_),
  };
  myoDeviceListener_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      myoDeviceListener_descriptor_,
      myoDeviceListener::default_instance_,
      myoDeviceListener_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myoDeviceListener, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myoDeviceListener, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(myoDeviceListener));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MyoDeviceListener_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    myoDeviceListener_descriptor_, &myoDeviceListener::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MyoDeviceListener_2eproto() {
  delete myoDeviceListener::default_instance_;
  delete myoDeviceListener_reflection_;
}

void protobuf_AddDesc_MyoDeviceListener_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::StrokeGeniusProto::protobuf_AddDesc_Vector3_2eproto();
  ::StrokeGeniusProto::protobuf_AddDesc_Quaternion_2eproto();
  ::StrokeGeniusProto::protobuf_AddDesc_EMGData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027MyoDeviceListener.proto\022\021StrokeGeniusP"
    "roto\032\rVector3.proto\032\020Quaternion.proto\032\rE"
    "MGData.proto\"\252\002\n\021myoDeviceListener\022\021\n\tti"
    "meStamp\030\001 \002(\005\022(\n\004pose\030\002 \002(\0132\032.StrokeGeni"
    "usProto.Vector3\0223\n\017orientationData\030\003 \002(\013"
    "2\032.StrokeGeniusProto.Vector3\0225\n\021accelero"
    "materData\030\004 \002(\0132\032.StrokeGeniusProto.Vect"
    "or3\0221\n\rgyroscopeData\030\005 \002(\0132\032.StrokeGeniu"
    "sProto.Vector3\022\014\n\004rssi\030\006 \002(\005\022+\n\007emgData\030"
    "\007 \002(\0132\032.StrokeGeniusProto.EMGData", 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MyoDeviceListener.proto", &protobuf_RegisterTypes);
  myoDeviceListener::default_instance_ = new myoDeviceListener();
  myoDeviceListener::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MyoDeviceListener_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MyoDeviceListener_2eproto {
  StaticDescriptorInitializer_MyoDeviceListener_2eproto() {
    protobuf_AddDesc_MyoDeviceListener_2eproto();
  }
} static_descriptor_initializer_MyoDeviceListener_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int myoDeviceListener::kTimeStampFieldNumber;
const int myoDeviceListener::kPoseFieldNumber;
const int myoDeviceListener::kOrientationDataFieldNumber;
const int myoDeviceListener::kAcceleromaterDataFieldNumber;
const int myoDeviceListener::kGyroscopeDataFieldNumber;
const int myoDeviceListener::kRssiFieldNumber;
const int myoDeviceListener::kEmgDataFieldNumber;
#endif  // !_MSC_VER

myoDeviceListener::myoDeviceListener()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void myoDeviceListener::InitAsDefaultInstance() {
  pose_ = const_cast< ::StrokeGeniusProto::Vector3*>(&::StrokeGeniusProto::Vector3::default_instance());
  orientationdata_ = const_cast< ::StrokeGeniusProto::Vector3*>(&::StrokeGeniusProto::Vector3::default_instance());
  acceleromaterdata_ = const_cast< ::StrokeGeniusProto::Vector3*>(&::StrokeGeniusProto::Vector3::default_instance());
  gyroscopedata_ = const_cast< ::StrokeGeniusProto::Vector3*>(&::StrokeGeniusProto::Vector3::default_instance());
  emgdata_ = const_cast< ::StrokeGeniusProto::EMGData*>(&::StrokeGeniusProto::EMGData::default_instance());
}

myoDeviceListener::myoDeviceListener(const myoDeviceListener& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void myoDeviceListener::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  pose_ = NULL;
  orientationdata_ = NULL;
  acceleromaterdata_ = NULL;
  gyroscopedata_ = NULL;
  rssi_ = 0;
  emgdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

myoDeviceListener::~myoDeviceListener() {
  SharedDtor();
}

void myoDeviceListener::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
    delete orientationdata_;
    delete acceleromaterdata_;
    delete gyroscopedata_;
    delete emgdata_;
  }
}

void myoDeviceListener::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* myoDeviceListener::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return myoDeviceListener_descriptor_;
}

const myoDeviceListener& myoDeviceListener::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MyoDeviceListener_2eproto();  return *default_instance_;
}

myoDeviceListener* myoDeviceListener::default_instance_ = NULL;

myoDeviceListener* myoDeviceListener::New() const {
  return new myoDeviceListener;
}

void myoDeviceListener::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::StrokeGeniusProto::Vector3::Clear();
    }
    if (has_orientationdata()) {
      if (orientationdata_ != NULL) orientationdata_->::StrokeGeniusProto::Vector3::Clear();
    }
    if (has_acceleromaterdata()) {
      if (acceleromaterdata_ != NULL) acceleromaterdata_->::StrokeGeniusProto::Vector3::Clear();
    }
    if (has_gyroscopedata()) {
      if (gyroscopedata_ != NULL) gyroscopedata_->::StrokeGeniusProto::Vector3::Clear();
    }
    rssi_ = 0;
    if (has_emgdata()) {
      if (emgdata_ != NULL) emgdata_->::StrokeGeniusProto::EMGData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool myoDeviceListener::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timeStamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }
      
      // required .StrokeGeniusProto.Vector3 pose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orientationData;
        break;
      }
      
      // required .StrokeGeniusProto.Vector3 orientationData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orientationData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientationdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_acceleromaterData;
        break;
      }
      
      // required .StrokeGeniusProto.Vector3 acceleromaterData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceleromaterData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleromaterdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gyroscopeData;
        break;
      }
      
      // required .StrokeGeniusProto.Vector3 gyroscopeData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gyroscopeData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyroscopedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rssi;
        break;
      }
      
      // required int32 rssi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_)));
          set_has_rssi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_emgData;
        break;
      }
      
      // required .StrokeGeniusProto.EMGData emgData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emgdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void myoDeviceListener::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timeStamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }
  
  // required .StrokeGeniusProto.Vector3 pose = 2;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pose(), output);
  }
  
  // required .StrokeGeniusProto.Vector3 orientationData = 3;
  if (has_orientationdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->orientationdata(), output);
  }
  
  // required .StrokeGeniusProto.Vector3 acceleromaterData = 4;
  if (has_acceleromaterdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->acceleromaterdata(), output);
  }
  
  // required .StrokeGeniusProto.Vector3 gyroscopeData = 5;
  if (has_gyroscopedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gyroscopedata(), output);
  }
  
  // required int32 rssi = 6;
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rssi(), output);
  }
  
  // required .StrokeGeniusProto.EMGData emgData = 7;
  if (has_emgdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->emgdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* myoDeviceListener::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timeStamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }
  
  // required .StrokeGeniusProto.Vector3 pose = 2;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pose(), target);
  }
  
  // required .StrokeGeniusProto.Vector3 orientationData = 3;
  if (has_orientationdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->orientationdata(), target);
  }
  
  // required .StrokeGeniusProto.Vector3 acceleromaterData = 4;
  if (has_acceleromaterdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->acceleromaterdata(), target);
  }
  
  // required .StrokeGeniusProto.Vector3 gyroscopeData = 5;
  if (has_gyroscopedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gyroscopedata(), target);
  }
  
  // required int32 rssi = 6;
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rssi(), target);
  }
  
  // required .StrokeGeniusProto.EMGData emgData = 7;
  if (has_emgdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->emgdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int myoDeviceListener::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timeStamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
    // required .StrokeGeniusProto.Vector3 pose = 2;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
    // required .StrokeGeniusProto.Vector3 orientationData = 3;
    if (has_orientationdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientationdata());
    }
    
    // required .StrokeGeniusProto.Vector3 acceleromaterData = 4;
    if (has_acceleromaterdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleromaterdata());
    }
    
    // required .StrokeGeniusProto.Vector3 gyroscopeData = 5;
    if (has_gyroscopedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gyroscopedata());
    }
    
    // required int32 rssi = 6;
    if (has_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rssi());
    }
    
    // required .StrokeGeniusProto.EMGData emgData = 7;
    if (has_emgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emgdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void myoDeviceListener::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const myoDeviceListener* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const myoDeviceListener*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void myoDeviceListener::MergeFrom(const myoDeviceListener& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_pose()) {
      mutable_pose()->::StrokeGeniusProto::Vector3::MergeFrom(from.pose());
    }
    if (from.has_orientationdata()) {
      mutable_orientationdata()->::StrokeGeniusProto::Vector3::MergeFrom(from.orientationdata());
    }
    if (from.has_acceleromaterdata()) {
      mutable_acceleromaterdata()->::StrokeGeniusProto::Vector3::MergeFrom(from.acceleromaterdata());
    }
    if (from.has_gyroscopedata()) {
      mutable_gyroscopedata()->::StrokeGeniusProto::Vector3::MergeFrom(from.gyroscopedata());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
    if (from.has_emgdata()) {
      mutable_emgdata()->::StrokeGeniusProto::EMGData::MergeFrom(from.emgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void myoDeviceListener::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void myoDeviceListener::CopyFrom(const myoDeviceListener& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool myoDeviceListener::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_orientationdata()) {
    if (!this->orientationdata().IsInitialized()) return false;
  }
  if (has_acceleromaterdata()) {
    if (!this->acceleromaterdata().IsInitialized()) return false;
  }
  if (has_gyroscopedata()) {
    if (!this->gyroscopedata().IsInitialized()) return false;
  }
  return true;
}

void myoDeviceListener::Swap(myoDeviceListener* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(pose_, other->pose_);
    std::swap(orientationdata_, other->orientationdata_);
    std::swap(acceleromaterdata_, other->acceleromaterdata_);
    std::swap(gyroscopedata_, other->gyroscopedata_);
    std::swap(rssi_, other->rssi_);
    std::swap(emgdata_, other->emgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata myoDeviceListener::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = myoDeviceListener_descriptor_;
  metadata.reflection = myoDeviceListener_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StrokeGeniusProto

// @@protoc_insertion_point(global_scope)
