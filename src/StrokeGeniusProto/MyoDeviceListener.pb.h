// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyoDeviceListener.proto

#ifndef PROTOBUF_MyoDeviceListener_2eproto__INCLUDED
#define PROTOBUF_MyoDeviceListener_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Vector3.pb.h"
#include "Quaternion.pb.h"
#include "EMGData.pb.h"
// @@protoc_insertion_point(includes)

namespace StrokeGeniusProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MyoDeviceListener_2eproto();
void protobuf_AssignDesc_MyoDeviceListener_2eproto();
void protobuf_ShutdownFile_MyoDeviceListener_2eproto();

class myoDeviceListener;

// ===================================================================

class myoDeviceListener : public ::google::protobuf::Message {
 public:
  myoDeviceListener();
  virtual ~myoDeviceListener();
  
  myoDeviceListener(const myoDeviceListener& from);
  
  inline myoDeviceListener& operator=(const myoDeviceListener& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const myoDeviceListener& default_instance();
  
  void Swap(myoDeviceListener* other);
  
  // implements Message ----------------------------------------------
  
  myoDeviceListener* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const myoDeviceListener& from);
  void MergeFrom(const myoDeviceListener& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 timeStamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);
  
  // required .StrokeGeniusProto.Vector3 pose = 2;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 2;
  inline const ::StrokeGeniusProto::Vector3& pose() const;
  inline ::StrokeGeniusProto::Vector3* mutable_pose();
  inline ::StrokeGeniusProto::Vector3* release_pose();
  
  // required .StrokeGeniusProto.Vector3 orientationData = 3;
  inline bool has_orientationdata() const;
  inline void clear_orientationdata();
  static const int kOrientationDataFieldNumber = 3;
  inline const ::StrokeGeniusProto::Vector3& orientationdata() const;
  inline ::StrokeGeniusProto::Vector3* mutable_orientationdata();
  inline ::StrokeGeniusProto::Vector3* release_orientationdata();
  
  // required .StrokeGeniusProto.Vector3 acceleromaterData = 4;
  inline bool has_acceleromaterdata() const;
  inline void clear_acceleromaterdata();
  static const int kAcceleromaterDataFieldNumber = 4;
  inline const ::StrokeGeniusProto::Vector3& acceleromaterdata() const;
  inline ::StrokeGeniusProto::Vector3* mutable_acceleromaterdata();
  inline ::StrokeGeniusProto::Vector3* release_acceleromaterdata();
  
  // required .StrokeGeniusProto.Vector3 gyroscopeData = 5;
  inline bool has_gyroscopedata() const;
  inline void clear_gyroscopedata();
  static const int kGyroscopeDataFieldNumber = 5;
  inline const ::StrokeGeniusProto::Vector3& gyroscopedata() const;
  inline ::StrokeGeniusProto::Vector3* mutable_gyroscopedata();
  inline ::StrokeGeniusProto::Vector3* release_gyroscopedata();
  
  // required int32 rssi = 6;
  inline bool has_rssi() const;
  inline void clear_rssi();
  static const int kRssiFieldNumber = 6;
  inline ::google::protobuf::int32 rssi() const;
  inline void set_rssi(::google::protobuf::int32 value);
  
  // required .StrokeGeniusProto.EMGData emgData = 7;
  inline bool has_emgdata() const;
  inline void clear_emgdata();
  static const int kEmgDataFieldNumber = 7;
  inline const ::StrokeGeniusProto::EMGData& emgdata() const;
  inline ::StrokeGeniusProto::EMGData* mutable_emgdata();
  inline ::StrokeGeniusProto::EMGData* release_emgdata();
  
  // @@protoc_insertion_point(class_scope:StrokeGeniusProto.myoDeviceListener)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_orientationdata();
  inline void clear_has_orientationdata();
  inline void set_has_acceleromaterdata();
  inline void clear_has_acceleromaterdata();
  inline void set_has_gyroscopedata();
  inline void clear_has_gyroscopedata();
  inline void set_has_rssi();
  inline void clear_has_rssi();
  inline void set_has_emgdata();
  inline void clear_has_emgdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::StrokeGeniusProto::Vector3* pose_;
  ::StrokeGeniusProto::Vector3* orientationdata_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 rssi_;
  ::StrokeGeniusProto::Vector3* acceleromaterdata_;
  ::StrokeGeniusProto::Vector3* gyroscopedata_;
  ::StrokeGeniusProto::EMGData* emgdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_MyoDeviceListener_2eproto();
  friend void protobuf_AssignDesc_MyoDeviceListener_2eproto();
  friend void protobuf_ShutdownFile_MyoDeviceListener_2eproto();
  
  void InitAsDefaultInstance();
  static myoDeviceListener* default_instance_;
};
// ===================================================================


// ===================================================================

// myoDeviceListener

// required int32 timeStamp = 1;
inline bool myoDeviceListener::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void myoDeviceListener::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void myoDeviceListener::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void myoDeviceListener::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 myoDeviceListener::timestamp() const {
  return timestamp_;
}
inline void myoDeviceListener::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required .StrokeGeniusProto.Vector3 pose = 2;
inline bool myoDeviceListener::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void myoDeviceListener::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void myoDeviceListener::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void myoDeviceListener::clear_pose() {
  if (pose_ != NULL) pose_->::StrokeGeniusProto::Vector3::Clear();
  clear_has_pose();
}
inline const ::StrokeGeniusProto::Vector3& myoDeviceListener::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::StrokeGeniusProto::Vector3* myoDeviceListener::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::StrokeGeniusProto::Vector3;
  return pose_;
}
inline ::StrokeGeniusProto::Vector3* myoDeviceListener::release_pose() {
  clear_has_pose();
  ::StrokeGeniusProto::Vector3* temp = pose_;
  pose_ = NULL;
  return temp;
}

// required .StrokeGeniusProto.Vector3 orientationData = 3;
inline bool myoDeviceListener::has_orientationdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void myoDeviceListener::set_has_orientationdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void myoDeviceListener::clear_has_orientationdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void myoDeviceListener::clear_orientationdata() {
  if (orientationdata_ != NULL) orientationdata_->::StrokeGeniusProto::Vector3::Clear();
  clear_has_orientationdata();
}
inline const ::StrokeGeniusProto::Vector3& myoDeviceListener::orientationdata() const {
  return orientationdata_ != NULL ? *orientationdata_ : *default_instance_->orientationdata_;
}
inline ::StrokeGeniusProto::Vector3* myoDeviceListener::mutable_orientationdata() {
  set_has_orientationdata();
  if (orientationdata_ == NULL) orientationdata_ = new ::StrokeGeniusProto::Vector3;
  return orientationdata_;
}
inline ::StrokeGeniusProto::Vector3* myoDeviceListener::release_orientationdata() {
  clear_has_orientationdata();
  ::StrokeGeniusProto::Vector3* temp = orientationdata_;
  orientationdata_ = NULL;
  return temp;
}

// required .StrokeGeniusProto.Vector3 acceleromaterData = 4;
inline bool myoDeviceListener::has_acceleromaterdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void myoDeviceListener::set_has_acceleromaterdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void myoDeviceListener::clear_has_acceleromaterdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void myoDeviceListener::clear_acceleromaterdata() {
  if (acceleromaterdata_ != NULL) acceleromaterdata_->::StrokeGeniusProto::Vector3::Clear();
  clear_has_acceleromaterdata();
}
inline const ::StrokeGeniusProto::Vector3& myoDeviceListener::acceleromaterdata() const {
  return acceleromaterdata_ != NULL ? *acceleromaterdata_ : *default_instance_->acceleromaterdata_;
}
inline ::StrokeGeniusProto::Vector3* myoDeviceListener::mutable_acceleromaterdata() {
  set_has_acceleromaterdata();
  if (acceleromaterdata_ == NULL) acceleromaterdata_ = new ::StrokeGeniusProto::Vector3;
  return acceleromaterdata_;
}
inline ::StrokeGeniusProto::Vector3* myoDeviceListener::release_acceleromaterdata() {
  clear_has_acceleromaterdata();
  ::StrokeGeniusProto::Vector3* temp = acceleromaterdata_;
  acceleromaterdata_ = NULL;
  return temp;
}

// required .StrokeGeniusProto.Vector3 gyroscopeData = 5;
inline bool myoDeviceListener::has_gyroscopedata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void myoDeviceListener::set_has_gyroscopedata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void myoDeviceListener::clear_has_gyroscopedata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void myoDeviceListener::clear_gyroscopedata() {
  if (gyroscopedata_ != NULL) gyroscopedata_->::StrokeGeniusProto::Vector3::Clear();
  clear_has_gyroscopedata();
}
inline const ::StrokeGeniusProto::Vector3& myoDeviceListener::gyroscopedata() const {
  return gyroscopedata_ != NULL ? *gyroscopedata_ : *default_instance_->gyroscopedata_;
}
inline ::StrokeGeniusProto::Vector3* myoDeviceListener::mutable_gyroscopedata() {
  set_has_gyroscopedata();
  if (gyroscopedata_ == NULL) gyroscopedata_ = new ::StrokeGeniusProto::Vector3;
  return gyroscopedata_;
}
inline ::StrokeGeniusProto::Vector3* myoDeviceListener::release_gyroscopedata() {
  clear_has_gyroscopedata();
  ::StrokeGeniusProto::Vector3* temp = gyroscopedata_;
  gyroscopedata_ = NULL;
  return temp;
}

// required int32 rssi = 6;
inline bool myoDeviceListener::has_rssi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void myoDeviceListener::set_has_rssi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void myoDeviceListener::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void myoDeviceListener::clear_rssi() {
  rssi_ = 0;
  clear_has_rssi();
}
inline ::google::protobuf::int32 myoDeviceListener::rssi() const {
  return rssi_;
}
inline void myoDeviceListener::set_rssi(::google::protobuf::int32 value) {
  set_has_rssi();
  rssi_ = value;
}

// required .StrokeGeniusProto.EMGData emgData = 7;
inline bool myoDeviceListener::has_emgdata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void myoDeviceListener::set_has_emgdata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void myoDeviceListener::clear_has_emgdata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void myoDeviceListener::clear_emgdata() {
  if (emgdata_ != NULL) emgdata_->::StrokeGeniusProto::EMGData::Clear();
  clear_has_emgdata();
}
inline const ::StrokeGeniusProto::EMGData& myoDeviceListener::emgdata() const {
  return emgdata_ != NULL ? *emgdata_ : *default_instance_->emgdata_;
}
inline ::StrokeGeniusProto::EMGData* myoDeviceListener::mutable_emgdata() {
  set_has_emgdata();
  if (emgdata_ == NULL) emgdata_ = new ::StrokeGeniusProto::EMGData;
  return emgdata_;
}
inline ::StrokeGeniusProto::EMGData* myoDeviceListener::release_emgdata() {
  clear_has_emgdata();
  ::StrokeGeniusProto::EMGData* temp = emgdata_;
  emgdata_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StrokeGeniusProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MyoDeviceListener_2eproto__INCLUDED
